<?php

namespace Gedmo\Timestampable\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class TimestampableFixtureArticleProxy extends \Timestampable\Fixture\Article implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function addComment(\Timestampable\Fixture\Comment $comment)
    {
        $this->_load();
        return parent::addComment($comment);
    }

    public function getComments()
    {
        $this->_load();
        return parent::getComments();
    }

    public function getCreated()
    {
        $this->_load();
        return parent::getCreated();
    }

    public function setCreated(\DateTime $created)
    {
        $this->_load();
        return parent::setCreated($created);
    }

    public function getPublished()
    {
        $this->_load();
        return parent::getPublished();
    }

    public function setPublished(\DateTime $published)
    {
        $this->_load();
        return parent::setPublished($published);
    }

    public function getUpdated()
    {
        $this->_load();
        return parent::getUpdated();
    }

    public function setUpdated(\DateTime $updated)
    {
        $this->_load();
        return parent::setUpdated($updated);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'comments', 'created', 'updated', 'published', 'type');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}